*watchdogs.txt*               quickrun.vim を使った非同期シンタックスチェッカー


==============================================================================
CONTENTS                                                  *watchdogs-contents*

Introduction                                          |watchdogs-introduction|
Usage                                                 |watchdogs-usage|
Avairable syntax checker                              |watchdogs-checker|
Config                                                |watchdogs-config|
  Auto checking                                       |watchdogs-auto|
Interfaces                                            |watchdogs-interface|
  Commands                                            |watchdogs-commands|
Settings                                              |watchdogs-setting|
  Variables                                           |watchdogs-variables|
  Add checker                                         |watchdogs-variables|


==============================================================================
INTRODUCTION                                          *watchdogs-introduction*

本プラグイン(yonchu/vim-watchdogs) は osyo-manga/vim-watchdogs を fork し
以下の改良を行ったプラグインです。

- 複数 checker の指定
- |watchdogs| の設定を |g:quickrun_config| から分離

ただし、fork 元の osyo-manga/vim-watchdogs との互換性はありません。


|watchdogs| は thinca 氏が作成された |quickrun| をバックエンドとしたシンタック
スチェックを行うためのプラグインです。
|quickrun| をバックエンドに使用することで、非同期でシンタックスチェックを行う
ことができ、さらに幅広い拡張を行うこともできます。
本プラグインを使用するにあたって予め下記のプラグインを導入しておく必要があ
ります。
す。

- vim-quickrun - github : https://github.com/thinca/vim-quickrun
  quickrun

- vimproc - github : https://github.com/Shougo/vimproc
  quickrun で非同期を行うためのプラグイン

- shabadou.vim - github : https://github.com/osyo-manga/shabadou.vim
  汎用的な quickrun-hook をまとめたプラグイン


また、下記のプラグインも導入しておくと利便性が上がります。

- vim-hier - github : https://github.com/jceb/vim-hier
  quickfix の該当するコード箇所のハイライトを行う
  本プラグインはデフォルトではハイライトの機能はないので、vim-hier などの外部
  プラグインを使用する必要があります

- quickfixstatus - https://github.com/yonchu/quickfixstatus
  quickfix の該当箇所にカーソルを移動させるとエラー内容がコマンドウィンドウに
  出力される

- quickfixsigns_vim - https://github.com/tomtom/quickfixsigns_vim
  quickfix の該当箇所に |sign| 表示を行うことができます。

本プラグインは quickfix へと出力を行なっているので、上記のような quickfix を参
照するプラグインを使用することが出来ます。


==============================================================================
USAGE                                                        *watchdogs-usage*

シンタックスチェックを行うには、|:WatchdogsRun| を実行することで
手動によるチェックを行うことが出来ます。

さらに、設定によってファイル保存時に自動実行することもできます。


==============================================================================
CHECKER                                                     *watchdogs-cheker*

|watchdogs| で既に定義されているシンタックスチェックの為のツールは次の通り
です。


- "g++"
  gcc の -fsyntax-only オプションで C++ のシンタックスチェックを行います。

- "g++03"
  gcc の -fsyntax-only オプションで C++ のシンタックスチェックを行います。
  "g++" と違い -std=gnu++0x  オプションはついていません。

- "clang++"
  clang の -fsyntax-only オプションで C++ のシンタックスチェックを行います。

- "clang++03"
  clang の -fsyntax-only オプションで C++ のシンタックスチェックを行います。
  "clang++" と違い -std=gnu++0x  オプションはついていません。

- "msvc"
  cl.exe の /Zs オプションで C++ のシンタックスチェックを行います。

- "ruby"
  ruby の -c オプションで Ruby のシンタックスチェックを行います。

- "jshint"
  jshint を使用した JavaScript のシンタックスチェックを行います。

- "gjslint"
  gjslint を使用した JavaScript のシンタックスチェックを行います。

- "ghc-mod"
  ghc-mod を使用した Haskell のシンタックスチェックを行います。

- "hlint"
  hlint を使用した Haskell のシンタックスチェックを行います。

- "pyflakes"
  pyflakes を使用した Python のシンタックスチェックを行います。

- "pep8"
  pep8 を使用した Python のシンタックスチェックを行います。

- "flake8"
  flake を使用した Python のシンタックスチェックを行います。

- "perl"
  perl の -c オプションで perl のシンタックスチェックを行います。

- "php"
  php の -l オプションで php のシンタックスチェックを行います。

- "luac"
  luac を使用した lua のシンタックスチェックを行います。

- "dmd"
  dmd の -c オプションで D言語のシンタックスチェックを行います。

- "gcc"
  gcc の -fsyntax-only オプションで C言語のシンタックスチェックを行います。

- "clang"
  clang の -fsyntax-only オプションで C言語のシンタックスチェックを行います。

- "vimparse.pl"
  vimparse.pl で perl のシンタックスチェックを行います。

- "scalac"
  scalac で scala のシンタックスチェックを行います。

- "sh"
  sh で sh のシンタックスチェックを行います。

- "zsh"
  zsh で zsh のシンタックスチェックを行います。

- "sass"
  sass で --check オプションで sass のシンタックスチェックを行います。

- "scss"
  sass で --check オプションで scss のシンタックスチェックを行います。

- "cofee"
  coffee の -c -l オプションで cofeee のシンタックスチェックを行います。

- "coffeelint"
  coffeelint で coffee のシンタックスチェックを行います。


各ツールを使用する為に予め Vim から使えるようにしておく必要があります。
デフォルトのcheckerに関する設定は、
|vim-watchdogs/autoload/watchdogs_config.vim| に記述されています。


==============================================================================
CONFIG                                                      *watchdogs-config*

------------------------------------------------------------------------------
Change using checker                                 *watchdogs-config-change*

ファイルタイプ毎に、使用する checker を変更する。

>
    let g:watchdogs_filetype_checkers = {
        \  'coffee' : [ 'coffeelint', 'coffee' ],
        \  'python' : [ 'flake8', 'pyflakes', 'pep8' ],
        \ }
<

------------------------------------------------------------------------------
Setup quickrun_config                       *watchdogs-config-quickrun_config*

|watchdogs| 用の quickrun_config を設定する。
(各 checker 実行時に使用する qucirun の設定)

以下の設定では、
vimproc の更新時間を変更しています。

>
    let g:watchdogs_quickrun_config = {
        \  'runner/vimproc/updatetime' : 40,
        \ }
<

------------------------------------------------------------------------------
Setup post process                             *watchdogs-config-post_process*

全ての checker による処理が終了した後に実行される処理を指定する。

以下の設定では、
シンタックスチェック後に自動的に quickfix ウィンドウを閉じます。

>
    let g:watchdogs_quickrun_post_config = {
        \  'hook/close_quickfix/enable_exit' : 1,
        \ }
<

------------------------------------------------------------------------------
Checker settings                           *watchdogs-config-checker_settings*

新規 checker の設定、または既存 checker の設定を変更する。

>
    let g:watchdogs_checkers = {
        \ 'jshint' : {
        \   'command' : 'jshint',
        \   'exec'    : '%c --verbose %s:p',
        \   'errorformat' : '%f: line %l\, col %c\, %m,%-G%.%#error\[s\],%-G',
        \  },
        \ }
<

------------------------------------------------------------------------------
Auto check settings                     *watchdogs-config-auto-check_settings*

ファイル保存時の自動実行する。

設定値は以下

  0 : 実行しない
  1 : 指定されたcheckerの中で、一番はじめに実行可能なものを1つだけ実行する
  2 : 指定されたcheckerを順にエラーが検出されるまで実行する。
  3 : 指定されたcheckerを順に全て実行する

>
    " 全てのfiletypeのデフォルトの動作を規定
    "let g:watchdogs_check_BufWritePost_enable = 0

    " filetype毎の動作を規定
    "   全体設定よりも優先される。
    "   ここに指定されていないfiletypeは全体設定に従う。
    let g:watchdogs_check_BufWritePost_enables = {
        \  'c'          : 0,
        \  'coffee'     : 3,
        \  'cpp'        : 0,
        \  'javascript' : 3,
        \  'perl'       : 1,
        \  'php'        : 1,
        \  'python'     : 3,
        \  'ruby'       : 1,
        \  'sass'       : 1,
        \  'scss'       : 1,
        \ }
<


==============================================================================
INTERFACES                                              *watchdogs-interfaces*

------------------------------------------------------------------------------
COMMANDS                                                  *watchdogs-commands*

:WatchdogsRun                                                  *:WatchdogsRun*
        現在のバッファのシンタックスチェックを行います。
        使用されるシンタックスチェックは |g:quickrun_config| を参照して決定さ
        れます。

:WatchdogsRunSilent                                      *:WatchdogsRunSilent*
        |:WatchdogsRun| とは違い、不正な設定だった場合にエラー出力が行われませ
        ん。

:WatchdogsRunSweep                                        *:WatchdogsRunSweep*
        |watchdogs| を強制終了させます。
        内部では |quickrun#sweep_sessions()| を呼び出しているだけなので詳しい
        挙動に関してはそちらを参照して下さい。


==============================================================================
SETTINGS                                                  *watchdogs-settings*

------------------------------------------------------------------------------
VARIABLES                                                *watchdogs-variables*

g:watchdogs_filetype_checkers                  *g:watchdogs_filetype_checkers*
    ファイルタイプごとの checker の設定を行います。
    詳しくは |watchdogs-config-quickrun_config| を参照して下さい。
>
    " Default
    let g:watchdogs_filetype_checkers = {}
<

g:watchdogs_quickrun_config                        *watchdogs_quickrun_config*
    |watchdog| quickrun_config の設定を行います。
    詳しくは |watchdogs-config-quickrun_config| を参照して下さい。
>
    " Default
    let g:watchdogs_quickrun_config = {}
<

g:watchdogs_quickrun_post_config            *g:watchdogs_quickrun_post_config*
    全ての checker による処理が終了した後に実行される処理を指定する。
    詳しくは |watchdogs-config-post_process| を参照して下さい。
>
    " Default
    let g:watchdogs_quickrun_post_config = {}
<

g:watchdogs_checkers                                    *g:watchdogs_checkers*
    新規 checker の設定、または既存 checker の設定を変更する。
    詳しくは |watchdogs-config-checker_settings| を参照して下さい。
>
    " Default
    let g:watchdogs_checkers = {}
<


g:watchdogs_check_BufWritePost_enable  *g:watchdogs_check_BufWritePost_enable*
    ファイル保存時の自動実行に関する設定を行います。
    詳しくは |watchdogs-config-checker_settings| を参照して下さい。
>
    " Default
    let g:watchdogs_check_BufWritePost_enable = 0
<

g:watchdogs_check_BufWritePost_enables *g:watchdogs_check_BufWritePost_enables*
    filetype毎の保存時の自動実行の設定を行う。
    全体設定(|watchdogs_check_BufWritePost_enable|)よりも優先されます。
    詳しくは |watchdogs-config-checker_settings| を参照して下さい。
>
    " Default
    let g:watchdogs_check_BufWritePost_enables = {}
<

------------------------------------------------------------------------------
ADD-CHECKER                                            *watchdogs-add-checker*

まず、以下のような設定を自身の .vimrc に記述し、

>
    let g:watchdogs_checkers = {
        \ '<checkerの名前>' : {
        \   'command' : 'コマンド名',
        \   'cmdopt'  : 'コマンドオプション',
        \   'exec'    : '%c %o %s:p',
        \   'errorformat' : 'エラーフォーマット',
        \  },
        \ }
<

次に、checkerの名前と使用するコマンド名の部分を埋めます。

最後にエラーフォーマットを定義します。
ここが一番難しいところですが、まず scrooloose/syntastic
に同様のコマンドがないか探してみて下さい。

以下のページに既にコマンドが存在していれば、そのファイルを開き、ファイル内の
|errorformat| をコピーして使用すればよいでしょう。

- syntastic/syntax_checkers - https://github.com/scrooloose/syntastic/tree/master/syntax_checkers

ない場合は自身で作成剃る必要があります。

``:help errorformat``や既存のerrorformatを参考にして下さい。


==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
